"use strict";(self.webpackChunkgridl_website=self.webpackChunkgridl_website||[]).push([[7],{3390:function(e,t,n){n.d(t,{Z:function(){return h}});var r=n(7294),l=n(5900),a=n.n(l),i=n(2053),o=function(e){var t=e.onToggle,n=e.isOn;return r.createElement("button",{onClick:t,className:"z-fab fixed bottom-4 right-4 w-16 h-16 rounded-full border-white border-solid border-2 bg-gray-900 text-white block lg:hidden shadow-lg"},n?r.createElement("svg",{width:"24",height:"24",fill:"none",className:"absolute top-1/2 left-1/2 -mt-3 -ml-3 transition duration-300 transform"},r.createElement("path",{d:"M6 18L18 6M6 6l12 12",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})):r.createElement("svg",{width:"24",height:"24",fill:"none",className:"absolute top-1/2 left-1/2 -mt-3 -ml-3 transition duration-300 transform"},r.createElement("path",{d:"M4 8h16M4 16h16",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})))},s=n(1597),c=function(e){var t=e.label,n=e.link,l=e.items,a=e.depth,i=e.onClick,o=n?r.createElement(s.rU,{className:"text-current",to:n,onClick:i},t):r.createElement("span",{className:"text-current"},t);return l&&l.length?r.createElement(r.Fragment,null,o,r.createElement(m,{items:l,onItemClick:i,depth:(a||0)+1})):o},d=function(e){var t=e.isVisible,n=e.onClick,l=t?"opacity-30":"opacity-0 pointer-events-none",i=a()("fixed inset-0 bg-black z-overlay","transform-gpu lg:transform-none transition-opacity duration-500 ease-in-out lg:hidden",l);return r.createElement("div",{className:i,onClick:n})},m=function(e){var t=e.items,n=e.depth,l=e.onItemClick,i=0===n?"text-xl":"text-base",o=0===n?"px-8 my-6":"px-4 my-4",s=0===n?"":"border-gray-600 border-solid border-solid border-l-2";return r.createElement("ul",{className:a()(o,i,s)},t.map((function(e){return r.createElement("li",{key:e.label},r.createElement(c,Object.assign({},e,{depth:n,onClick:l})))})))},u=function(e){var t=e.items,n=e.isVisible,l=e.className,i=e.onBackdropClick,o=e.onItemClick,s=e.depth,c=void 0===s?0:s,u=n?"translate-x-full":"",f=a()("sidebar",u,l);return r.createElement(r.Fragment,null,r.createElement(d,{isVisible:n,onClick:i}),r.createElement("aside",{className:f},r.createElement(m,{items:t,depth:c,onItemClick:o})))},f=n(5593),h=function(e){var t=e.children,n=e.className,l=e.sidebarItems,s=(0,r.useState)(!1),c=s[0],d=s[1],m=function(){return d(!1)};return r.createElement(r.Fragment,null,r.createElement(i.Z,null),r.createElement("div",{className:"min-h-screen flex flex-col"},r.createElement("main",{className:a()("main flex flex-column",n)},r.createElement(u,{items:l,isVisible:c,onBackdropClick:m,onItemClick:m}),r.createElement("div",{className:"flex-1 flex flex-col overflow-y-auto"},t),r.createElement(o,{onToggle:function(){return d(!c)},isOn:c})),r.createElement(f.Z,null)))}},4357:function(e,t,n){n.d(t,{M:function(){return l}});var r=n(5632),l=[{label:"Basics",items:[{label:"Data structure",link:(0,r.hb)("grid-data-structure")},{label:"Selectors",link:(0,r.hb)("grid-selectors")},{label:"Transformers",link:(0,r.hb)("grid-transformers")},{label:"Search & Find",link:(0,r.hb)("searching-cell-values-in-a-grid")},{label:"Walkers",link:(0,r.hb)("grid-walkers")},{label:"Reducers",link:(0,r.hb)("grid-reducers")},{label:"Side effects",link:(0,r.hb)("grid-side-effects")}]}]},4092:function(e,t,n){n.r(t);var r=n(1597),l=n(7294),a=n(1085),i=n(3390),o=n(7431),s=n(4357),c=n(5632);t.default=function(){return l.createElement(i.Z,{sidebarItems:s.M},l.createElement(o.Z,{title:"Getting started with walkers",description:"Instructions for flexibly traversing cells in a grid in different ways."}),l.createElement("section",{className:"p-8"},l.createElement("h1",null,"Walkers"),l.createElement("h2",null,"What's a walker?"),l.createElement("p",{dangerouslySetInnerHTML:{__html:'In gridl a grid can be traversed with a so called walker. A walker is a <a href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noopener noreferrer">generator function</a> that iterates from one cell to the next by calling the walker\'s <code>next()</code> method. '}}),l.createElement(a.Z,{code:d,language:"javascript"}),l.createElement("h2",null,"Traversing in a different order"),l.createElement("p",null,"The order in which the walker traverses the grid is determined by the specified ",l.createElement("code",null,"walk")," function, which by default is ",l.createElement(r.rU,{to:(0,c.qb)("walkWENS")},"walkWENS()"),". ",l.createElement("b",null,"WENS")," stands for ",l.createElement("b",null,"West"),", ",l.createElement("b",null,"East"),", ",l.createElement("b",null,"North"),", ",l.createElement("b",null,"South"),", which means that the grid is traversed from West to East and from North to South. A ",l.createElement("code",null,"walk")," function takes a cell index (positive integer between 0 and the number of cells minus 1) and calculates the associated position on the grid."),l.createElement(a.Z,{code:m,language:"javascript"}),l.createElement("h2",null,"Functions that use walkers"),l.createElement("p",null,"Walkers are used by all iterating functions such as ",l.createElement(r.rU,{to:(0,c.qb)("forEachCell")},"forEachCell"),", ",l.createElement(r.rU,{to:(0,c.qb)("reduceGrid")},"reduceGrid"),", ",l.createElement(r.rU,{to:(0,c.qb)("findCell")},"findCell"),", ",l.createElement(r.rU,{to:(0,c.qb)("findPosition")},"findPosition"),", etc. This allows you to traverse the grid in a very flexible way."),l.createElement(a.Z,{code:u,language:"javascript"})))};var d='import {createWalker} from "gridl/core";\n\nconst grid = createGridFromArray2D([\n    [1, 1, 1],\n    [1, 1, 1],\n]);\nconst walker = createWalker(grid);\nwalker.next(); // => {value: {index: 0, position: {x: 0, y: 0}}, done: false}\nwalker.next(); // => {value: {index: 1, position: {x: 1, y: 0}}, done: false}\nwalker.next(); // => {value: {index: 2, position: {x: 2, y: 0}}, done: false}\nwalker.next(); // => {value: {index: 3, position: {x: 0, y: 1}}, done: false}\nwalker.next(); // => {value: {index: 4, position: {x: 1, y: 1}}, done: false}\nwalker.next(); // => {value: {index: 5, position: {x: 2, y: 1}}, done: false}\nwalker.next(); // => {value: undefined, done: true}',m='import {createWalker, walkSNWE} from "gridl/core";\n\nconst grid = createGridFromArray2D([\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [9, 10, 11]\n]);\nconst walker = createWalker(grid, walkSNWE);\n\n// traversing order using walkSNWE would be:\n// [\n//     [3, 7, 11],\n//     [2, 6, 10],\n//     [1, 5,  9],\n//     [0, 4,  8],\n// ]',u='import {createWalker, walkSNWE} from "gridl/core";\nimport {forEachCell} from "gridl/sideEffects";\n\nconst grid = createGridFromArray2D([\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [9, 10, 11]\n]);\nconst arr = [];\n\nforEachCell(grid, (cellValue) => {\n    arr.push(cellValue);\n}, walkSNWE);\n\n// => arr is: [9, 6, 3, 0, 10, 7, 4, 1, 11, 8, 5, 2]'}}]);
//# sourceMappingURL=component---src-pages-getting-started-grid-walkers-tsx-18446b18ebfa7be545ad.js.map