{"version":3,"file":"component---src-pages-getting-started-grid-data-structure-tsx-f3b0bf87f8095c4a07ca.js","mappings":"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","sources":["webpack://gridl-website/./src/components/fab-button.tsx","webpack://gridl-website/./src/components/layout/sidebar.tsx","webpack://gridl-website/./src/components/layout/layout-sidebar.tsx","webpack://gridl-website/./src/data/sidebar-items-getting-started.ts","webpack://gridl-website/./src/pages/getting-started/grid-data-structure.tsx"],"sourcesContent":["import React, {FC} from \"react\";\n\ninterface FabButtonProps {\n    onToggle: () => void;\n    isOn: boolean;\n}\n\nconst FabButton: FC<FabButtonProps> = ({onToggle, isOn}) => (\n    <button\n        onClick={onToggle}\n        className=\"z-fab fixed bottom-4 right-4 w-16 h-16 rounded-full border-white border-solid border-2 bg-gray-900 text-white block lg:hidden shadow-lg\"\n    >\n        {isOn ? (\n            <svg\n                width=\"24\"\n                height=\"24\"\n                fill=\"none\"\n                className=\"absolute top-1/2 left-1/2 -mt-3 -ml-3 transition duration-300 transform\"\n            >\n                <path\n                    d=\"M6 18L18 6M6 6l12 12\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                ></path>\n            </svg>\n        ) : (\n            <svg\n                width=\"24\"\n                height=\"24\"\n                fill=\"none\"\n                className=\"absolute top-1/2 left-1/2 -mt-3 -ml-3 transition duration-300 transform\"\n            >\n                <path d=\"M4 8h16M4 16h16\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n            </svg>\n        )}\n    </button>\n);\n\nexport default FabButton;\n","import {Link} from \"gatsby\";\nimport React, {FC} from \"react\";\nimport cn from \"classnames\";\n\nexport interface SidebarItemProps {\n    depth?: number;\n    label: string;\n    link?: string;\n    items?: SidebarItemProps[];\n    onClick?: () => void;\n}\n\nconst SidebarItem: FC<SidebarItemProps> = ({label, link, items, depth, onClick}) => {\n    const currentNode = link ? (\n        <Link className=\"text-current\" to={link} onClick={onClick}>\n            {label}\n        </Link>\n    ) : (\n        <span className=\"text-current\">{label}</span>\n    );\n\n    return items && items.length ? (\n        <>\n            {currentNode}\n            <SidebarList items={items} onItemClick={onClick} depth={(depth || 0) + 1} />\n        </>\n    ) : (\n        currentNode\n    );\n};\n\ninterface BackdropProps {\n    isVisible?: boolean;\n    onClick?: () => void;\n}\n\nconst Backdrop: FC<BackdropProps> = ({isVisible, onClick}) => {\n    const baseClasses = \"fixed inset-0 bg-black z-overlay\";\n    const animationClasses = \"transform-gpu lg:transform-none transition-opacity duration-500 ease-in-out lg:hidden\";\n    const visibilityClasses = isVisible ? \"opacity-30\" : \"opacity-0 pointer-events-none\";\n    const allClasses = cn(baseClasses, animationClasses, visibilityClasses);\n    return <div className={allClasses} onClick={onClick} />;\n};\n\nexport interface SidebarProps {\n    items: SidebarItemProps[];\n    depth?: number;\n    className?: string;\n    isVisible?: boolean;\n    onBackdropClick?: () => void;\n    onItemClick?: () => void;\n}\n\nconst SidebarList: FC<SidebarProps> = ({items, depth, onItemClick}) => {\n    const textClasses = depth === 0 ? \"text-xl\" : \"text-base\";\n    const paddingClasses = depth === 0 ? \"px-8 my-6\" : \"px-4 my-4\";\n    const borderClasses = depth === 0 ? \"\" : \"border-gray-600 border-solid border-solid border-l-2\";\n    return (\n        <ul className={cn(paddingClasses, textClasses, borderClasses)}>\n            {items.map((item) => (\n                <li key={item.label}>\n                    <SidebarItem {...item} depth={depth} onClick={onItemClick} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nconst Sidebar: FC<SidebarProps> = ({items, isVisible, className, onBackdropClick, onItemClick, depth = 0}) => {\n    const visibilityClasses = isVisible ? \"translate-x-full\" : \"\";\n    const allClasses = cn(\"sidebar\", visibilityClasses, className);\n    return (\n        <>\n            <Backdrop isVisible={isVisible} onClick={onBackdropClick} />\n            <aside className={allClasses}>\n                <SidebarList items={items} depth={depth} onItemClick={onItemClick} />\n            </aside>\n        </>\n    );\n};\n\nexport default Sidebar;\n","import React, {FC, useState} from \"react\";\nimport cn from \"classnames\";\nimport MainNav from \"./main-nav\";\nimport FabButton from \"../fab-button\";\nimport Sidebar, {SidebarItemProps} from \"./sidebar\";\nimport PageFooter from \"./page-footer\";\n\ninterface LayoutProps {\n    sidebarItems: SidebarItemProps[];\n    className?: string;\n}\n\nconst Layout: FC<LayoutProps> = ({children, className, sidebarItems}) => {\n    const [sidebarVisible, setSidebarVisible] = useState(false);\n    const hideSidebar = () => setSidebarVisible(false);\n    const toggleSidebar = () => setSidebarVisible(!sidebarVisible);\n    return (\n        <>\n            <MainNav />\n            <div className=\"min-h-screen flex flex-col\">\n                <main className={cn(\"main flex flex-column\", className)}>\n                    <Sidebar\n                        items={sidebarItems}\n                        isVisible={sidebarVisible}\n                        onBackdropClick={hideSidebar}\n                        onItemClick={hideSidebar}\n                    />\n                    <div className=\"flex-1 flex flex-col overflow-y-auto\">{children}</div>\n                    <FabButton onToggle={toggleSidebar} isOn={sidebarVisible} />\n                </main>\n                <PageFooter />\n            </div>\n        </>\n    );\n};\n\nexport default Layout;\n","import {SidebarItemProps} from \"../components/layout/sidebar\";\nimport {gettingStartedSlug} from \"../helpers/slug-helper\";\n\nexport const sidebarItemsGettingStarted: SidebarItemProps[] = [\n    {\n        label: \"Basics\",\n        items: [\n            {\n                label: \"Data structure\",\n                link: gettingStartedSlug(\"grid-data-structure\"),\n            },\n            {\n                label: \"Selectors\",\n                link: gettingStartedSlug(\"grid-selectors\"),\n            },\n            {\n                label: \"Transformers\",\n                link: gettingStartedSlug(\"grid-transformers\"),\n            },\n            {\n                label: \"Search & Find\",\n                link: gettingStartedSlug(\"searching-cell-values-in-a-grid\"),\n            },\n            {\n                label: \"Walkers\",\n                link: gettingStartedSlug(\"grid-walkers\"),\n            },\n            {\n                label: \"Reducers\",\n                link: gettingStartedSlug(\"grid-reducers\"),\n            },\n            {\n                label: \"Side effects\",\n                link: gettingStartedSlug(\"grid-side-effects\"),\n            },\n        ],\n    },\n    // {\n    //     label: \"Advanced topics\",\n    //     items: [\n    //         {\n    //             label: \"Custom selectors\",\n    //             link: gettingStartedSlug(\"custom-selectors\"),\n    //         },\n    //         {\n    //             label: \"Custom transformers\",\n    //             link: gettingStartedSlug(\"custom-transformers\"),\n    //         },\n    //         {\n    //             label: \"Using sub grids\",\n    //             link: gettingStartedSlug(\"using-sub-grids\"),\n    //         },\n    //         {\n    //             label: \"gridl + redux\",\n    //             link: gettingStartedSlug(\"gridl-and-redux\"),\n    //         },\n    //     ],\n    // },\n];\n","import {Link} from \"gatsby\";\nimport React, {FC} from \"react\";\nimport Code from \"../../components/code\";\nimport Layout from \"../../components/layout/layout-sidebar\";\nimport Seo from \"../../components/seo\";\nimport {sidebarItemsGettingStarted} from \"../../data/sidebar-items-getting-started\";\nimport {apiDocsSlug, gettingStartedSlug} from \"../../helpers/slug-helper\";\n\nconst DataStructuresPage: FC = () => (\n    <Layout sidebarItems={sidebarItemsGettingStarted}>\n        <Seo\n            title=\"Getting started with the data structure\"\n            description=\"Explanation of the grid data structure used in gridl.\"\n        />\n        <section className=\"p-8\">\n            <h1>{`The grid data structure`}</h1>\n            <p>\n                {`In gridl, a grid is an immutable grid-based data structure that has the following properties, which should be self-explanatory.`}\n            </p>\n            <Code code={codeExample1} language=\"javascript\" />\n\n            <h2>{`The data array`}</h2>\n            <p>\n                {`The `}\n                <code>array2D</code>\n                {` data array is a two-dimensional array that contains the actual cells. The coordinate system starts at the upper left corner at `}\n                <code className=\"inline-code\">{`{x: 0, y: 0}`}</code>\n                {` and ends at the bottom right corner, which would be `}\n                <code className=\"inline-code\">{`{x: 3, y: 2}`}</code>\n                {` in the example above. It can contain any values like primitive strings, numbers or booleans or complex objects. In most cases you don't need to access it directly. Instead you can use one of gridl's `}\n                <Link to={gettingStartedSlug(\"grid-selectors\")}>selector functions</Link>\n                {`.`}\n            </p>\n\n            <h2>{`Creating a new grid from scratch`}</h2>\n            <p>\n                {`gridl provides some factory functions to create grid instances. To create a new grid from scratch use `}\n                <Link to={apiDocsSlug(\"createGrid\")}>createGrid</Link>\n                {`:`}\n            </p>\n            <Code code={codeExample2} language=\"javascript\" />\n\n            <h2>{`Creating a new grid from existing data`}</h2>\n            <p>\n                {`To create a grid instance from an existing data array, use `}\n                <Link to={apiDocsSlug(\"createGridFromArray2D\")}>createGridFromArray2D</Link>\n                {`:`}\n            </p>\n            <Code code={codeExample3} language=\"javascript\" />\n        </section>\n    </Layout>\n);\n\nexport default DataStructuresPage;\n\nconst codeExample1 = `{\n    x: 2,\n    y: 1,                       \n    cellCount: 12,\n    columnCount: 4,\n    rowCount: 3,\n    array2D: [\n        [  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [\"x\", \"x\", \"x\", \"x\"],\n    ],\n}`;\n\nconst codeExample2 = `\nimport {createGrid} from \"gridl/core\";\n\nconst grid = createGrid({\n    columnCount: 4,\n    rowCount: 3,\n    createCell: (pos, idx) => pos.y < 2 ? idx : \"x\",\n});\n// {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 4,\n//     rowCount: 3,\n//     array2D: [\n//         [  0,   1,   2,   3],\n//         [  4,   5,   6,   7],\n//         [\"x\", \"x\", \"x\", \"x\"],\n//     ],\n// }\n`;\n\nconst codeExample3 = `import {createGridFromArray2D} from \"gridl/core\";\n\nconst grid = createGridFromArray2D([\n    [0,  1,  2,  3],\n    [4,  5,  6,  7],\n    [8,  9, 10, 11],\n]);`;\n"],"names":["onToggle","isOn","onClick","className","width","height","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","SidebarItem","label","link","items","depth","currentNode","to","length","SidebarList","onItemClick","Backdrop","isVisible","visibilityClasses","allClasses","cn","textClasses","paddingClasses","borderClasses","map","item","key","onBackdropClick","children","sidebarItems","useState","sidebarVisible","setSidebarVisible","hideSidebar","sidebarItemsGettingStarted","gettingStartedSlug","title","description","code","codeExample1","language","apiDocsSlug","codeExample2","codeExample3"],"sourceRoot":""}