"use strict";(self.webpackChunkgridl_website=self.webpackChunkgridl_website||[]).push([[206],{3390:function(e,n,r){r.d(n,{Z:function(){return g}});var t=r(7294),a=r(5900),l=r.n(a),o=r(2053),i=function(e){var n=e.onToggle,r=e.isOn;return t.createElement("button",{onClick:n,className:"z-fab fixed bottom-4 right-4 w-16 h-16 rounded-full border-white border-solid border-2 bg-gray-900 text-white block lg:hidden shadow-lg"},r?t.createElement("svg",{width:"24",height:"24",fill:"none",className:"absolute top-1/2 left-1/2 -mt-3 -ml-3 transition duration-300 transform"},t.createElement("path",{d:"M6 18L18 6M6 6l12 12",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})):t.createElement("svg",{width:"24",height:"24",fill:"none",className:"absolute top-1/2 left-1/2 -mt-3 -ml-3 transition duration-300 transform"},t.createElement("path",{d:"M4 8h16M4 16h16",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})))},s=r(1597),c=function(e){var n=e.label,r=e.link,a=e.items,l=e.depth,o=e.onClick,i=r?t.createElement(s.rU,{className:"text-current",to:r,onClick:o},n):t.createElement("span",{className:"text-current"},n);return a&&a.length?t.createElement(t.Fragment,null,i,t.createElement(d,{items:a,onItemClick:o,depth:(l||0)+1})):i},m=function(e){var n=e.isVisible,r=e.onClick,a=n?"opacity-30":"opacity-0 pointer-events-none",o=l()("fixed inset-0 bg-black z-overlay","transform-gpu lg:transform-none transition-opacity duration-500 ease-in-out lg:hidden",a);return t.createElement("div",{className:o,onClick:r})},d=function(e){var n=e.items,r=e.depth,a=e.onItemClick,o=0===r?"text-xl":"text-base",i=0===r?"px-8 my-6":"px-4 my-4",s=0===r?"":"border-gray-600 border-solid border-solid border-l-2";return t.createElement("ul",{className:l()(i,o,s)},n.map((function(e){return t.createElement("li",{key:e.label},t.createElement(c,Object.assign({},e,{depth:r,onClick:a})))})))},u=function(e){var n=e.items,r=e.isVisible,a=e.className,o=e.onBackdropClick,i=e.onItemClick,s=e.depth,c=void 0===s?0:s,u=r?"translate-x-full":"",f=l()("sidebar",u,a);return t.createElement(t.Fragment,null,t.createElement(m,{isVisible:r,onClick:o}),t.createElement("aside",{className:f},t.createElement(d,{items:n,depth:c,onItemClick:i})))},f=r(5593),g=function(e){var n=e.children,r=e.className,a=e.sidebarItems,s=(0,t.useState)(!1),c=s[0],m=s[1],d=function(){return m(!1)};return t.createElement(t.Fragment,null,t.createElement(o.Z,null),t.createElement("div",{className:"min-h-screen flex flex-col"},t.createElement("main",{className:l()("main flex flex-column",r)},t.createElement(u,{items:a,isVisible:c,onBackdropClick:d,onItemClick:d}),t.createElement("div",{className:"flex-1 flex flex-col overflow-y-auto"},n),t.createElement(i,{onToggle:function(){return m(!c)},isOn:c})),t.createElement(f.Z,null)))}},4357:function(e,n,r){r.d(n,{M:function(){return a}});var t=r(5632),a=[{label:"Basics",items:[{label:"Data structure",link:(0,t.hb)("grid-data-structure")},{label:"Selectors",link:(0,t.hb)("grid-selectors")},{label:"Transformers",link:(0,t.hb)("grid-transformers")},{label:"Search & Find",link:(0,t.hb)("searching-cell-values-in-a-grid")},{label:"Walkers",link:(0,t.hb)("grid-walkers")},{label:"Reducers",link:(0,t.hb)("grid-reducers")},{label:"Side effects",link:(0,t.hb)("grid-side-effects")}]}]},8971:function(e,n,r){r.r(n);var t=r(1597),a=r(7294),l=r(1085),o=r(3390),i=r(7431),s=r(4357),c=r(5632);n.default=function(){return a.createElement(o.Z,{sidebarItems:s.M},a.createElement(i.Z,{title:"Getting started with grid transformers",description:"Instructions for changing, mutating and transforming grid data with gridl."}),a.createElement("section",{className:"p-8"},a.createElement("h1",null,"Transformers"),a.createElement("h2",null,"What are transformers?"),a.createElement("p",null,"As the name suggests, transformer functions are used to transform grid data. Since a grid instance is shallowly frozen, the data structure can't be changed. Instead, transformer functions take the original grid and return a new transformed instance."),a.createElement("h2",null,"Using a single transfomer"),a.createElement(l.Z,{code:m,language:"javascript"}),a.createElement("h2",null,"Composing transformers"),a.createElement("p",null,"To combine multiple transfomers, use the ",a.createElement(t.rU,{to:(0,c.qb)("transform")},"transform")," function."),a.createElement(l.Z,{code:d,language:"javascript"}),a.createElement("h2",null,"Custom transformers"),a.createElement("p",null,"If you can't find an existing transformer that suits your needs, you can easily write your own one."),a.createElement(l.Z,{code:u,language:"javascript"}),a.createElement("p",null,"Note that ",a.createElement("code",null,"removeOddRows()")," in the example is a transformer creator function, which means that it must return a ",a.createElement(t.rU,{to:"#TODO"},"GridTransformer")," - another function, that takes the orginal grid as single parameter and returns the new transformed grid instance. This general transformer pattern is necessary, so that the transformer can be used together with the ",a.createElement(t.rU,{to:(0,c.qb)("transform")},"transform")," function."),a.createElement("h2",null,"Full list of transformers"),a.createElement("p",null,"For details see the ",a.createElement(t.rU,{to:(0,c.qb)("transformers")},"full list of transformers"),".")))};var m='import {createGridFromArray2D} from "gridl/core";\nimport {addRowTop} from "gridl/transformers";\n\nconst grid = createGridFromArray2D([\n    [0,  1,  2,  3],\n    [4,  5,  6,  7],\n    [8,  9, 10, 11],\n]);\nconst newGrid = addRowTop(["x", "x", "x", "x"])(grid);\n// resulting grid:\n// {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 4,\n//     rowCount: 4,\n//     array2D: [\n//         ["x", "x", "x", "x"],\n//         [  0,   1,   2,   3],\n//         [  4,   5,   6,   7],\n//         [  8,   9,  10,  11],\n//     ],\n// }',d="const oldGrid = createGridFromArray2D([\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n]);\n\nconst newGrid = transform(\n    map((_cell, pos) => pos.x < 2 ? 1 : 2), // 1. apply map transformer\n    setCell({x: 2, y: 1}, 666),             // 2. apply setCell transformer\n    rotate90(1),                            // 3. apply rotate90 transformer\n    removeRow(1),                           // 4. apply removeRow transformer\n)(oldGrid);\n\n// => resulting grid\n// {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [1, 1, 1],\n//         [2, 666, 2],\n//         [2, 2, 2],\n//     ],\n// }",u="// custom transformer\n// removes odd rows and fills the remaining cells with a given fillValue\nconst removeOddRowsAndFillWith = (fillValue) => {\n    return (grid) => {\n        const array2D = [];\n        grid.array2D.forEach((row, y)) => {\n            if (y % 2 === 0) {\n                const filledRow = row.map(() => fillValue);\n                array2D.push(filledRow);\n            }\n        };\n        return createGridFromArray2D({x: grid.x, y: grid.y, array2D});\n    };\n};\n\nconst grid = createGridFromArray2D([\n    [0,  1,  2,  3],\n    [4,  5,  6,  7],\n    [8,  9, 10, 11],\n]);\n\n// apply your custom transformer to the grid\nremoveOddRowsAndFillWith(7)(grid);\n\n// or alternatively, apply your custom transformer with transform()\ntransform(removeOddRowsAndFillWith(7))(grid);\n\n// => resulting grid\n// {\n//     x: 0,\n//     y: 0,\n//     cellCount: 8,\n//     columnCount: 4,\n//     rowCount: 2,\n//     array2D: [\n//         [7, 7, 7, 7],\n//         [7, 7, 7, 7],\n//     ],\n// }"}}]);
//# sourceMappingURL=component---src-pages-getting-started-grid-transformers-tsx-3bdb67c8a5bb58a38d37.js.map