{"version":3,"file":"component---src-pages-getting-started-grid-selectors-tsx-d3840b458e501a39bee3.js","mappings":"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","sources":["webpack://gridl-website/./src/components/fab-button.tsx","webpack://gridl-website/./src/components/layout/sidebar.tsx","webpack://gridl-website/./src/components/layout/layout-sidebar.tsx","webpack://gridl-website/./src/data/sidebar-items-getting-started.ts","webpack://gridl-website/./src/pages/getting-started/grid-selectors.tsx"],"sourcesContent":["import React, {FC} from \"react\";\n\ninterface FabButtonProps {\n    onToggle: () => void;\n    isOn: boolean;\n}\n\nconst FabButton: FC<FabButtonProps> = ({onToggle, isOn}) => (\n    <button\n        onClick={onToggle}\n        className=\"z-fab fixed bottom-4 right-4 w-16 h-16 rounded-full border-white border-solid border-2 bg-gray-900 text-white block lg:hidden shadow-lg\"\n    >\n        {isOn ? (\n            <svg\n                width=\"24\"\n                height=\"24\"\n                fill=\"none\"\n                className=\"absolute top-1/2 left-1/2 -mt-3 -ml-3 transition duration-300 transform\"\n            >\n                <path\n                    d=\"M6 18L18 6M6 6l12 12\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                ></path>\n            </svg>\n        ) : (\n            <svg\n                width=\"24\"\n                height=\"24\"\n                fill=\"none\"\n                className=\"absolute top-1/2 left-1/2 -mt-3 -ml-3 transition duration-300 transform\"\n            >\n                <path d=\"M4 8h16M4 16h16\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n            </svg>\n        )}\n    </button>\n);\n\nexport default FabButton;\n","import {Link} from \"gatsby\";\nimport React, {FC} from \"react\";\nimport cn from \"classnames\";\n\nexport interface SidebarItemProps {\n    depth?: number;\n    label: string;\n    link?: string;\n    items?: SidebarItemProps[];\n    onClick?: () => void;\n}\n\nconst SidebarItem: FC<SidebarItemProps> = ({label, link, items, depth, onClick}) => {\n    const currentNode = link ? (\n        <Link className=\"text-current\" to={link} onClick={onClick}>\n            {label}\n        </Link>\n    ) : (\n        <span className=\"text-current\">{label}</span>\n    );\n\n    return items && items.length ? (\n        <>\n            {currentNode}\n            <SidebarList items={items} onItemClick={onClick} depth={(depth || 0) + 1} />\n        </>\n    ) : (\n        currentNode\n    );\n};\n\ninterface BackdropProps {\n    isVisible?: boolean;\n    onClick?: () => void;\n}\n\nconst Backdrop: FC<BackdropProps> = ({isVisible, onClick}) => {\n    const baseClasses = \"fixed inset-0 bg-black z-overlay\";\n    const animationClasses = \"transform-gpu lg:transform-none transition-opacity duration-500 ease-in-out lg:hidden\";\n    const visibilityClasses = isVisible ? \"opacity-30\" : \"opacity-0 pointer-events-none\";\n    const allClasses = cn(baseClasses, animationClasses, visibilityClasses);\n    return <div className={allClasses} onClick={onClick} />;\n};\n\nexport interface SidebarProps {\n    items: SidebarItemProps[];\n    depth?: number;\n    className?: string;\n    isVisible?: boolean;\n    onBackdropClick?: () => void;\n    onItemClick?: () => void;\n}\n\nconst SidebarList: FC<SidebarProps> = ({items, depth, onItemClick}) => {\n    const textClasses = depth === 0 ? \"text-xl\" : \"text-base\";\n    const paddingClasses = depth === 0 ? \"px-8 my-6\" : \"px-4 my-4\";\n    const borderClasses = depth === 0 ? \"\" : \"border-gray-600 border-solid border-solid border-l-2\";\n    return (\n        <ul className={cn(paddingClasses, textClasses, borderClasses)}>\n            {items.map((item) => (\n                <li key={item.label}>\n                    <SidebarItem {...item} depth={depth} onClick={onItemClick} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nconst Sidebar: FC<SidebarProps> = ({items, isVisible, className, onBackdropClick, onItemClick, depth = 0}) => {\n    const visibilityClasses = isVisible ? \"translate-x-full\" : \"\";\n    const allClasses = cn(\"sidebar\", visibilityClasses, className);\n    return (\n        <>\n            <Backdrop isVisible={isVisible} onClick={onBackdropClick} />\n            <aside className={allClasses}>\n                <SidebarList items={items} depth={depth} onItemClick={onItemClick} />\n            </aside>\n        </>\n    );\n};\n\nexport default Sidebar;\n","import React, {FC, useState} from \"react\";\nimport cn from \"classnames\";\nimport MainNav from \"./main-nav\";\nimport FabButton from \"../fab-button\";\nimport Sidebar, {SidebarItemProps} from \"./sidebar\";\nimport PageFooter from \"./page-footer\";\n\ninterface LayoutProps {\n    sidebarItems: SidebarItemProps[];\n    className?: string;\n}\n\nconst Layout: FC<LayoutProps> = ({children, className, sidebarItems}) => {\n    const [sidebarVisible, setSidebarVisible] = useState(false);\n    const hideSidebar = () => setSidebarVisible(false);\n    const toggleSidebar = () => setSidebarVisible(!sidebarVisible);\n    return (\n        <>\n            <MainNav />\n            <div className=\"min-h-screen flex flex-col\">\n                <main className={cn(\"main flex flex-column\", className)}>\n                    <Sidebar\n                        items={sidebarItems}\n                        isVisible={sidebarVisible}\n                        onBackdropClick={hideSidebar}\n                        onItemClick={hideSidebar}\n                    />\n                    <div className=\"flex-1 flex flex-col overflow-y-auto\">{children}</div>\n                    <FabButton onToggle={toggleSidebar} isOn={sidebarVisible} />\n                </main>\n                <PageFooter />\n            </div>\n        </>\n    );\n};\n\nexport default Layout;\n","import {SidebarItemProps} from \"../components/layout/sidebar\";\nimport {gettingStartedSlug} from \"../helpers/slug-helper\";\n\nexport const sidebarItemsGettingStarted: SidebarItemProps[] = [\n    {\n        label: \"Basics\",\n        items: [\n            {\n                label: \"Data structure\",\n                link: gettingStartedSlug(\"grid-data-structure\"),\n            },\n            {\n                label: \"Selectors\",\n                link: gettingStartedSlug(\"grid-selectors\"),\n            },\n            {\n                label: \"Transformers\",\n                link: gettingStartedSlug(\"grid-transformers\"),\n            },\n            {\n                label: \"Search & Find\",\n                link: gettingStartedSlug(\"searching-cell-values-in-a-grid\"),\n            },\n            {\n                label: \"Walkers\",\n                link: gettingStartedSlug(\"grid-walkers\"),\n            },\n            {\n                label: \"Reducers\",\n                link: gettingStartedSlug(\"grid-reducers\"),\n            },\n            {\n                label: \"Side effects\",\n                link: gettingStartedSlug(\"grid-side-effects\"),\n            },\n        ],\n    },\n    // {\n    //     label: \"Advanced topics\",\n    //     items: [\n    //         {\n    //             label: \"Custom selectors\",\n    //             link: gettingStartedSlug(\"custom-selectors\"),\n    //         },\n    //         {\n    //             label: \"Custom transformers\",\n    //             link: gettingStartedSlug(\"custom-transformers\"),\n    //         },\n    //         {\n    //             label: \"Using sub grids\",\n    //             link: gettingStartedSlug(\"using-sub-grids\"),\n    //         },\n    //         {\n    //             label: \"gridl + redux\",\n    //             link: gettingStartedSlug(\"gridl-and-redux\"),\n    //         },\n    //     ],\n    // },\n];\n","import React, {FC} from \"react\";\nimport Code from \"../../components/code\";\nimport Layout from \"../../components/layout/layout-sidebar\";\nimport Seo from \"../../components/seo\";\nimport {sidebarItemsGettingStarted} from \"../../data/sidebar-items-getting-started\";\n\nconst SelectorsPage: FC = () => (\n    <Layout sidebarItems={sidebarItemsGettingStarted}>\n        <Seo\n            title=\"Getting started with grid selectors\"\n            description=\"Instructions for selecting cells, neighbouring cells, columns, rows or areas in a grid.\"\n        />\n        <section className=\"p-8\">\n            <h1>{`Selectors`}</h1>\n            <p>\n                {`To select data from a grid instance, gridl provides some selector function, which allow you to access data like cell values, columns, rows, subgrids or neighbouring cells.`}\n            </p>\n\n            <a id=\"selectCell\" className=\"text-current hover:text-current\">\n                <h2>{`Selecting a single cell`}</h2>\n            </a>\n            <p>{`Select a cell at a certain x,y position in the grid.`}</p>\n            <Code code={codeSelectCell} language=\"javascript\" />\n\n            <h2>{`Selecting a column`}</h2>\n            <p>{`Select a column at a certain x-position in the grid.`}</p>\n            <Code code={codeSelectColumn} language=\"javascript\" />\n\n            <h2>{`Selecting a row`}</h2>\n            <p>{`Select a row at a certain y-position in the grid.`}</p>\n            <Code code={codeSelectRow} language=\"javascript\" />\n\n            <h2>{`Selecting a sub grid`}</h2>\n            <p\n                dangerouslySetInnerHTML={{\n                    __html: `The sub grid selector allows you to extract a certain area of a grid as a new grid instance. The area is specified by <code>x</code>, <code>y</code>, <code>columnCount</code> and <code>rowCount</code> values.`,\n                }}\n            />\n            <Code code={codeSelectSubgrid} language=\"javascript\" />\n\n            <h2>{`Selecting neighbouring cells`}</h2>\n            <p>\n                {`Select some or all neighbouring cells of a certain cell in the grid. By default, the selector returns all surrounding neighbours. This can be changed by providing a list of positions with the optional `}\n                <code>positions</code>\n                {` property.`}\n            </p>\n            <Code code={codeSelectNeighbours} language=\"javascript\" />\n        </section>\n    </Layout>\n);\n\nexport default SelectorsPage;\n\nconst codeSelectCell = `import {createGridFromArray2D, selectCell} from \"gridl/core\";\n\nconst grid = createGridFromArray2D([\n    [0,  1,  2,  3],\n    [4,  5,  6,  7],\n    [8,  9, 10, 11],\n]);\n\n// get the cell value at position = {x: 1, y: 2}\nselectCell({grid, x: 2, y: 1}); // => 6`;\n\nconst codeSelectColumn = `import {createGridFromArray2D, selectColumn} from \"gridl/core\";\n\nconst grid = createGridFromArray2D([\n    [  0,   1,   2,   3],\n    [  4,   5,   6,   7],\n    [\"x\", \"x\", \"x\", \"x\"],\n]);\n\n// get the column at x = 2\nselectColumn({grid, x: 2}); // => [2, 6, \"x\"]`;\n\nconst codeSelectRow = `import {createGridFromArray2D, selectRow} from \"gridl/core\";\n\nconst grid = createGridFromArray2D([\n    [0,  1,  2,  3],\n    [4,  5,  6,  7],\n    [8,  9, 10, 11],\n]);\n\n// get the row at y = 1\nselectRow({grid, y: 1}); // => [4, 5, 6, 7];`;\n\nconst codeSelectSubgrid = `import {createGridFromArray2D, selectSubGrid} from \"gridl/core\";\n\nconst grid = createGridFromArray2D([\n    [  0,   1,   2,   3],\n    [  4,   5,   6,   7],\n    [\"x\", \"x\", \"x\", \"x\"],\n]);\n\nselectSubGrid({grid, x: 1, y: 1, columnCount: 2, rowCount: 2});\n// returned subgrid (which is a new grid instance):\n// {\n//     x: 1,\n//     y: 1,\n//     cellCount: 4,\n//     columnCount: 2,\n//     rowCount: 2,\n//     array2D: [\n//         [  5,   6],\n//         [\"x\", \"x\"],\n//     ],\n// }`;\n\nconst codeSelectNeighbours = `import {\n    createGridFromArray2D,\n    selectSubGrid,\n    NorthWest,\n    North,\n    NorthEast,\n    OrthogonalDirections,\n} from \"gridl/core\";\n\nconst grid = createGridFromArray2D([\n    [0,  1,  2,  3],\n    [4,  5,  6,  7],\n    [8,  9, 10, 11],\n]);\n\n// get all neighbouring cells around the origin at position {x: 1, y: 0}\nselectNeighbours({grid, origin: {x: 1, y: 0}});\n// => [\n//     {cell:  1,  position: {x: 1, y: 0}},\n//     {cell:  2,  position: {x: 2, y: 0}},\n//     {cell:  6,  position: {x: 2, y: 1}},\n//     {cell: 10,  position: {x: 2, y: 2}},\n//     {cell:  9,  position: {x: 1, y: 2}},\n//     {cell:  8,  position: {x: 0, y: 2}},\n//     {cell:  4,  position: {x: 0, y: 1}},\n//     {cell:  0,  position: {x: 0, y: 0}},\n// ]\n\n// get orthogonal neighbours only (North, East, South, East)\nselectNeighbours({grid, origin: {x: 1, y: 1, positions: OrthogonalDirections}});\n// => [\n//     {cell: 1,  position: {x: 1, y: 0}},\n//     {cell: 6,  position: {x: 2, y: 1}},\n//     {cell: 9,  position: {x: 1, y: 2}},\n//     {cell: 4,  position: {x: 0, y: 1}},\n// ]\n\n// select top neighbours only\nconst topNeighbourPositions = [NorthWest, North, NorthEast];\nselectNeighbours({grid, origin: {x: 2, y:1}, positions: topNeighbourPositions});\n// => [\n//     {cell: 1,  position: {x: 1, y: 0}},\n//     {cell: 2,  position: {x: 2, y: 0}},\n//     {cell: 3,  position: {x: 3, y: 0}},\n// ]`;\n"],"names":["onToggle","isOn","onClick","className","width","height","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","SidebarItem","label","link","items","depth","currentNode","to","length","SidebarList","onItemClick","Backdrop","isVisible","visibilityClasses","allClasses","cn","textClasses","paddingClasses","borderClasses","map","item","key","onBackdropClick","children","sidebarItems","useState","sidebarVisible","setSidebarVisible","hideSidebar","sidebarItemsGettingStarted","gettingStartedSlug","title","description","id","code","codeSelectCell","language","codeSelectColumn","codeSelectRow","dangerouslySetInnerHTML","__html","codeSelectSubgrid","codeSelectNeighbours"],"sourceRoot":""}