{
    "componentChunkName": "component---src-pages-api-docs-tsx",
    "path": "/api-docs/",
    "result": {"data":{"allFnModule":{"nodes":[{"name":"core","functions":[{"name":"createGrid","signatures":[{"description":"Creates a new immutable grid instance.","exampleCode":"const grid = createGrid({\n    columnCount: 3,\n    rowCount: 4,\n    x: 1,\n    y: 2,\n    createCell: (_pos, idx) => idx,\n});\n// => {\n//     x: 1,\n//     y: 2,\n//     cellCount: 12,\n//     columnCount: 4,\n//     rowCount: 3,\n//     array2D: [\n//         [0, 1, 2, 3],\n//         [4, 5, 6, 7],\n//         [8, 9, 10, 11],\n//     ],\n// }\n","params":[{"description":"The properties to create a new grid.","name":"props","type":{"link":null,"name":"CreateGridProps","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"createGridFromArray2D","signatures":[{"description":"Creates a new grid instance from an existing two-dimensional grid array and adds a position.","exampleCode":"const grid = createGridFromArray2D({\n    x: 5,\n    y: 6,\n    array2D: [\n        [0, 1, 2, 3],\n        [4, 5, 6, 7],\n        [8, 9, 10, 11],\n    ],\n});\n// => {\n//     x: 5,\n//     y: 6,\n//     cellCount: 12,\n//     columnCount: 4,\n//     rowCount: 3,\n//     array2D: [\n//         [0, 1, 2, 3],\n//         [4, 5, 6, 7],\n//         [8, 9, 10, 11],\n//     ]\n// }\n","params":[{"description":"The props to create a grid from an 2d array.","name":"props","type":{"link":null,"name":"CreateGridFromArray2DProps","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"},{"description":"Creates a new grid instance from an existing two-dimensional grid array and sets the position to the default values of {x: 0, y: 0}.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9, 10, 11],\n]);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 4,\n//     rowCount: 3,\n//     array2D: [\n//         [0, 1, 2, 3],\n//         [4, 5, 6, 7],\n//         [8, 9, 10, 11],\n//     ]\n// }\n","params":[{"description":"The array from which to create the new grid instance.","name":"array2D","type":{"link":null,"name":"T","arrayDepth":2,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"createWalker","signatures":[{"description":"Creates a walker that iterates over all cells with an index starting from `0` to `cellCount - 1`.","exampleCode":"const shape = {columnCount: 3, rowCount: 2, cellCount: 6};\nconst walker = createWalker(shape);\n\nwalker.next(); // => {value: {index: 0, position: {x: 0, y: 0}}, done: false}\nwalker.next(); // => {value: {index: 1, position: {x: 1, y: 0}}, done: false}\nwalker.next(); // => {value: {index: 2, position: {x: 2, y: 0}}, done: false}\nwalker.next(); // => {value: {index: 3, position: {x: 0, y: 1}}, done: false}\nwalker.next(); // => {value: {index: 4, position: {x: 1, y: 1}}, done: false}\nwalker.next(); // => {value: {index: 5, position: {x: 2, y: 1}}, done: false}\nwalker.next(); // => {value: undefined, done: true}\n","params":[{"description":"The shape of the grid that is traversed.","name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"Function that converts the iteration index into a grid position and thus determines the order in which the iterator traverses the cells. If the function is omitted the default walker walkDefault is used.","name":"walk","type":{"link":null,"name":"GridWalker","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Generator","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"GridIterationResult","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"any","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"unknown","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"selectCell","signatures":[{"description":"Returns the cell value at the given position.","exampleCode":null,"params":[{"description":"The properties.","name":"props","type":{"link":null,"name":"SelectCellProps","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":null,"arrayDepth":0,"union":[{"name":"undefined","arrayDepth":0},{"name":"T","arrayDepth":0}],"typeArguments":null}},"since":"0.11.1\n"}]},{"name":"selectColumn","signatures":[{"description":"Returns the column at the given x-position or undefined if the column doesn't exist.","exampleCode":null,"params":[{"description":"The properties.","name":"props","type":{"link":null,"name":"SelectColumnProps","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":null,"arrayDepth":0,"union":[{"name":"undefined","arrayDepth":0},{"name":"T","arrayDepth":1}],"typeArguments":null}},"since":"0.11.1\n"}]},{"name":"selectNeighbours","signatures":[{"description":"Returns the neighbouring cells of the given origin with the grid.","exampleCode":null,"params":[{"description":null,"name":"props","type":{"link":null,"name":"SelectNeighboursProps","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"SelectNeighboursResult","arrayDepth":1,"union":null,"typeArguments":[{"description":null,"name":null,"arrayDepth":0,"union":[{"name":"undefined","arrayDepth":0},{"name":"T","arrayDepth":0}],"typeArguments":null}]}},"since":"0.11.1\n"}]},{"name":"selectRow","signatures":[{"description":"Returns the row at the given y-position or undefined if the row doesn't exist.","exampleCode":null,"params":[{"description":"The properties.","name":"props","type":{"link":null,"name":"SelectRowProps","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":null,"arrayDepth":0,"union":[{"name":"undefined","arrayDepth":0},{"name":"T","arrayDepth":1}],"typeArguments":null}},"since":"0.11.1\n"}]},{"name":"selectSubGrid","signatures":[{"description":"Returns a subset of the grid defined by given coordinates.","exampleCode":null,"params":[{"description":"The properties.","name":"props","type":{"link":null,"name":"SelectSubGridProps","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Readonly","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"GridObject","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":null,"arrayDepth":0,"union":[{"name":"undefined","arrayDepth":0},{"name":"T","arrayDepth":0}]}]}]}},"since":"0.11.1\n"}]},{"name":"walkDefault","signatures":[{"description":"Alias of walkWENS","exampleCode":null,"params":[{"description":null,"name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":null,"name":"index","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.0"}]},{"name":"walkEWNS","signatures":[{"description":"Converts a grid index into a grid position, going from east to west and north to south (EWNS).","exampleCode":"const grid = createGridFromArray2D([\n    [ 2,  1, 0],\n    [ 5,  4, 3],\n    [ 8,  7, 6],\n    [11, 10, 9],\n]);\nwalkEWNS(grid,  0); // => {x: 2, y: 0}\nwalkEWNS(grid,  1); // => {x: 1, y: 0}\nwalkEWNS(grid,  2); // => {x: 0, y: 0}\nwalkEWNS(grid,  3); // => {x: 2, y: 1}\nwalkEWNS(grid,  4); // => {x: 1, y: 1}\nwalkEWNS(grid,  5); // => {x: 0, y: 1}\nwalkEWNS(grid,  6); // => {x: 2, y: 2}\nwalkEWNS(grid,  7); // => {x: 1, y: 2}\nwalkEWNS(grid,  8); // => {x: 0, y: 2}\nwalkEWNS(grid,  9); // => {x: 2, y: 3}\nwalkEWNS(grid, 10); // => {x: 1, y: 3}\nwalkEWNS(grid, 11); // => {x: 0, y: 3}\n","params":[{"description":"The shape to iterate over. Note that since a grid implements the Shape interface, you can just pass in the grid as well.","name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The index to be converted.","name":"index","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1"}]},{"name":"walkEWSN","signatures":[{"description":"Converts a grid index into a grid position, going from east to west and south to north (EWSN).","exampleCode":"const grid = createGridFromArray2D([\n    [11, 10, 9],\n    [ 8,  7, 6],\n    [ 5,  4, 3],\n    [ 2,  1, 0],\n]);\nwalkEWSN(grid,  0); // => {x: 2, y: 3}\nwalkEWSN(grid,  1); // => {x: 1, y: 3}\nwalkEWSN(grid,  2); // => {x: 0, y: 3}\nwalkEWSN(grid,  3); // => {x: 2, y: 2}\nwalkEWSN(grid,  4); // => {x: 1, y: 2}\nwalkEWSN(grid,  5); // => {x: 0, y: 2}\nwalkEWSN(grid,  6); // => {x: 2, y: 1}\nwalkEWSN(grid,  7); // => {x: 1, y: 1}\nwalkEWSN(grid,  8); // => {x: 0, y: 1}\nwalkEWSN(grid,  9); // => {x: 2, y: 0}\nwalkEWSN(grid, 10); // => {x: 1, y: 0}\nwalkEWSN(grid, 11); // => {x: 0, y: 0}\n","params":[{"description":"The grid shape to iterate. Note that since a grid implements the Shape interface, you can just provide a grid instance as well.","name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The index to be converted.","name":"index","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1"}]},{"name":"walkNSEW","signatures":[{"description":"Converts a grid index into a grid position, going from north to south and east to west (NSEW).","exampleCode":"const grid = createGridFromArray2D([\n    [ 8, 4, 0],\n    [ 9, 5, 1],\n    [10, 6, 2],\n    [11, 7, 3],\n]);\nwalkNSEW(grid,  0); // => {x: 2, y: 0}\nwalkNSEW(grid,  1); // => {x: 2, y: 1}\nwalkNSEW(grid,  2); // => {x: 2, y: 2}\nwalkNSEW(grid,  3); // => {x: 2, y: 3}\nwalkNSEW(grid,  4); // => {x: 1, y: 0}\nwalkNSEW(grid,  5); // => {x: 1, y: 1}\nwalkNSEW(grid,  6); // => {x: 1, y: 2}\nwalkNSEW(grid,  7); // => {x: 1, y: 3}\nwalkNSEW(grid,  8); // => {x: 0, y: 0}\nwalkNSEW(grid,  9); // => {x: 0, y: 1}\nwalkNSEW(grid, 10); // => {x: 0, y: 2}\nwalkNSEW(grid, 11); // => {x: 0, y: 3}\n","params":[{"description":"The grid shape to iterate. Note that since a grid implements the Shape interface, you can just provide a grid instance as well.","name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The index to be converted.","name":"index","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1"}]},{"name":"walkNSWE","signatures":[{"description":"Converts a grid index into a grid position, going from north to south and west to east (NSWE).","exampleCode":"const grid = createGridFromArray2D([\n    [0, 4,  8],\n    [1, 5,  9],\n    [2, 6, 10],\n    [3, 7, 11],\n]);\nwalkNSWE(grid,  0)); // => {x: 0, y: 0}\nwalkNSWE(grid,  1)); // => {x: 0, y: 1}\nwalkNSWE(grid,  2)); // => {x: 0, y: 2}\nwalkNSWE(grid,  3)); // => {x: 0, y: 3}\nwalkNSWE(grid,  4)); // => {x: 1, y: 0}\nwalkNSWE(grid,  5)); // => {x: 1, y: 1}\nwalkNSWE(grid,  6)); // => {x: 1, y: 2}\nwalkNSWE(grid,  7)); // => {x: 1, y: 3}\nwalkNSWE(grid,  8)); // => {x: 2, y: 0}\nwalkNSWE(grid,  9)); // => {x: 2, y: 1}\nwalkNSWE(grid, 10)); // => {x: 2, y: 2}\nwalkNSWE(grid, 11)); // => {x: 2, y: 3}\n","params":[{"description":"The grid shape to iterate. Note that since a grid implements the Shape interface, you can just provide a grid instance as well.","name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The index to be converted.","name":"index","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1"}]},{"name":"walkSNEW","signatures":[{"description":"Converts a grid index into a grid position, going from south to north and east to west (SNEW).","exampleCode":"const grid = createGridFromArray2D([\n    [11, 7, 3],\n    [10, 6, 2],\n    [ 9, 5, 1],\n    [ 8, 4, 0],\n]);\nwalkSNEW(grid,  0); // => {x: 2, y: 3}\nwalkSNEW(grid,  1); // => {x: 2, y: 2}\nwalkSNEW(grid,  2); // => {x: 2, y: 1}\nwalkSNEW(grid,  3); // => {x: 2, y: 0}\nwalkSNEW(grid,  4); // => {x: 1, y: 3}\nwalkSNEW(grid,  5); // => {x: 1, y: 2}\nwalkSNEW(grid,  6); // => {x: 1, y: 1}\nwalkSNEW(grid,  7); // => {x: 1, y: 0}\nwalkSNEW(grid,  8); // => {x: 0, y: 3}\nwalkSNEW(grid,  9); // => {x: 0, y: 2}\nwalkSNEW(grid, 10); // => {x: 0, y: 1}\nwalkSNEW(grid, 11); // => {x: 0, y: 0}\n","params":[{"description":"The grid shape to iterate. Note that since a grid implements the Shape interface, you can just provide a grid instance as well.","name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The index to be converted.","name":"index","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1"}]},{"name":"walkSNWE","signatures":[{"description":"Converts a grid index into a grid position, going from south to north and west to east (SNWE).","exampleCode":"const grid = createGridFromArray2D([\n    [3, 7, 11],\n    [2, 6, 10],\n    [1, 5,  9],\n    [0, 4,  8],\n]);\nwalkSNWE(grid,  0); // => {x: 0, y: 3}\nwalkSNWE(grid,  1); // => {x: 0, y: 2}\nwalkSNWE(grid,  2); // => {x: 0, y: 1}\nwalkSNWE(grid,  3); // => {x: 0, y: 0}\nwalkSNWE(grid,  4); // => {x: 1, y: 3}\nwalkSNWE(grid,  5); // => {x: 1, y: 2}\nwalkSNWE(grid,  6); // => {x: 1, y: 1}\nwalkSNWE(grid,  7); // => {x: 1, y: 0}\nwalkSNWE(grid,  8); // => {x: 2, y: 3}\nwalkSNWE(grid,  9); // => {x: 2, y: 2}\nwalkSNWE(grid, 10); // => {x: 2, y: 1}\nwalkSNWE(grid, 11); // => {x: 2, y: 0}\n","params":[{"description":"The grid shape to iterate. Note that since a grid implements the Shape interface, you can just provide a grid instance as well.","name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The index to be converted.","name":"index","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1"}]},{"name":"walkWENS","signatures":[{"description":"Converts an index to a grid position, going from west to east and north to south (WENS).","exampleCode":null,"params":[{"description":"The grid shape to iterate. Note that since a grid implements the Shape interface, you can just provide a grid instance as well.","name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The index to be converted.","name":"index","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1\n"}]},{"name":"walkWESN","signatures":[{"description":"Converts a grid index into a grid position, going from west to east and south to north (WESN).","exampleCode":"const grid = createGridFromArray2D([\n    [9, 10, 11],\n    [6,  7,  8],\n    [3,  4,  5],\n    [0,  1,  2],\n]);\nwalkWESN(grid,  0)); // => {x: 0, y: 3}\nwalkWESN(grid,  1)); // => {x: 1, y: 3}\nwalkWESN(grid,  2)); // => {x: 2, y: 3}\nwalkWESN(grid,  3)); // => {x: 0, y: 2}\nwalkWESN(grid,  4)); // => {x: 1, y: 2}\nwalkWESN(grid,  5)); // => {x: 2, y: 2}\nwalkWESN(grid,  6)); // => {x: 0, y: 1}\nwalkWESN(grid,  7)); // => {x: 1, y: 1}\nwalkWESN(grid,  8)); // => {x: 2, y: 1}\nwalkWESN(grid,  9)); // => {x: 0, y: 0}\nwalkWESN(grid, 10)); // => {x: 1, y: 0}\nwalkWESN(grid, 11)); // => {x: 2, y: 0}\n","params":[{"description":"The grid shape to iterate. Note that since a grid implements the Shape interface, you can just provide a grid instance as well.","name":"shape","type":{"link":null,"name":"AdvancedShape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The index to be converted.","name":"index","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[],"returns":{"description":null,"type":{"description":null,"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1"}]}],"path":"core"},{"name":"reducers","functions":[{"name":"everyCell","signatures":[{"description":"True if `predicate` returns true for all cells in the grid.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\n\nconst lessThan10 = (cell: number) => cell < 10;\neveryCell(grid, lessThan10); // => true\n\nconst equal5 = (cell: number) => cell === 5;\neveryCell(grid, equal5); // => false\n","params":[{"description":"The grid to be checked.","name":"grid","type":{"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"The callback function to be matched.","name":"predicate","type":{"link":null,"name":"EveryCellPredicate","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"boolean","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.3\n"}]},{"name":"isEmptyGrid","signatures":[{"description":"Returns true if the grid includes no values.","exampleCode":"isEmptyGrid(\n    createGrid({\n        columnCount: 0,\n        rowCount: 0,\n        createCell: () => 7,\n    })\n); // => true\n","params":[{"description":"The grid to be checked.","name":"grid","type":{"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"boolean","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.3\n"}]},{"name":"noCells","signatures":[{"description":"True if `predicate` returns false for all cells in the grid.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\n\nconst equal666 = (cell: number) => cell === 666;\nnoCells(grid, equal666); // => true\n\nconst equal5 = (cell: number) => cell === 5;\nnoCells(grid, equal5); // => false\n","params":[{"description":"The grid to be checked.","name":"grid","type":{"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"The callback function to be matched.","name":"predicate","type":{"link":null,"name":"NoCellsPredicate","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"boolean","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.3\n"}]},{"name":"reduceGrid","signatures":[{"description":"Creates a reducer function that executes the provided callback function on each cell of the grid, resulting in a single output value.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\nconst initialValue = 10;\nconst sum = reduceGrid(grid, (acc, cellValue: number) => acc + cellValue, initialValue);\n// => 31 (10 + 1 + 2 + 3 + 4 + 5 + 6)\n","params":[{"description":"The grid to be reduced.","name":"grid","type":{"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"The callback function that is executed on each cell in the grid.","name":"callback","type":{"link":null,"name":"ReduceCallback","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"U","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"The value to use as the first argument to the first call of the callback.","name":"initialValue","type":{"link":null,"name":"U","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"This function calculates the grid position based on the iteration step and therefore defines the order in which the cells are iterated. If no walker is defined walkDefault is used.","name":"walk","type":{"link":null,"name":"GridWalker","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null},{"description":"The result type.","link":null,"name":"U","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"U","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1"}]},{"name":"someCells","signatures":[{"description":"True if `predicate` returns true for at least one cells in the grid.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\n\nconst lessThan10 = (cell: number) => cell < 10;\nsomeCells(grid, lessThan10); // => true\n\nconst equal5 = (cell: number) => cell === 5;\nsomeCells(grid, equal5); // => false\n","params":[{"description":"The grid to be checked.","name":"grid","type":{"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"The callback function to be matched.","name":"predicate","type":{"link":null,"name":"SomeCellsPredicate","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"boolean","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.3\n"}]}],"path":"reducers"},{"name":"search","functions":[{"name":"findCell","signatures":[{"description":"Receives a grid and returns the position of the first element that satisfies the provided\ntesting function or equals the provided value. If no cell satisfies the testing function,\n`undefined` is returned.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 1, 1, 4],\n    [5, 6, 2, 8],\n    [0, 2, 3, 4],\n]);\nfindCell(grid, (v) => v > 2); // => 4\n","params":[{"description":"The grid in which to search.","name":"grid","type":{"link":null,"name":"Readonly","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"GridObject","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null}]}]}},{"description":"Callback function that is called on each cell. Should return `true` if the element is found or `false` if not.","name":"callback","type":{"link":null,"name":"FindCallback","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"This function calculates the grid position based on the iteration step and therefore defines the order in which the cells are iterated. If no walker is defined walkDefault is used.","name":"walk","type":{"link":null,"name":"GridWalker","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":null,"arrayDepth":0,"union":[{"name":"undefined","arrayDepth":0},{"name":"T","arrayDepth":0}],"typeArguments":null}},"since":"0.11.1"}]},{"name":"findMax","signatures":[{"description":"Finds the maximum value in the grid by comparing values with the greater than operator.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 1, 1, 4],\n    [5, 6, 2, 8],\n    [0, 2, 3, 4],\n]);\nfindMax(grid); // => 8\n","params":[{"description":"The grid in which to search.","name":"grid","type":{"link":null,"name":"Readonly","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"GridObject","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null}]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":null,"arrayDepth":0,"union":[{"name":"undefined","arrayDepth":0},{"name":"T","arrayDepth":0}],"typeArguments":null}},"since":"0.11.4\n"}]},{"name":"findMin","signatures":[{"description":"Finds the minimum value in the grid by comparing values with the less than operator.","exampleCode":"const grid = createGridFromArray2D([\n    [2, 9, 2, 4],\n    [5, 6, 2, 8],\n    [1, 2, 3, 4],\n]);\nfindMin(grid); // => 1\n","params":[{"description":"The grid in which to search.","name":"grid","type":{"link":null,"name":"Readonly","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"GridObject","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null}]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":null,"arrayDepth":0,"union":[{"name":"undefined","arrayDepth":0},{"name":"T","arrayDepth":0}],"typeArguments":null}},"since":"0.11.4\n"}]},{"name":"findPosition","signatures":[{"description":"Receives a grid and returns the value of the first element that satisfies the provided\ntesting function. If no values satisfies the testing function, `undefined` is returned.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 1, 1, 4],\n    [5, 6, \"test\", 8],\n    [1, \"test\", 3, 4],\n]);\nfindPosition(grid, (v) => v > 2); // => {x: 3, y: 0}\nfindPosition(grid, (v) => typeof v === \"string\"); // => {x: 2, y: 1}\n","params":[{"description":"The grid in which to search.","name":"grid","type":{"link":null,"name":"Readonly","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"GridObject","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null}]}]}},{"description":"Cell value to find or callback function that is called on each cell. Should return true if the element is found or false if not.","name":"valueOrCallback","type":{"link":null,"name":null,"arrayDepth":0,"union":[{"name":"T","arrayDepth":0},{"name":"FindCallback","arrayDepth":0}],"typeArguments":null}},{"description":"This function calculates the grid position based on the iteration index and therefore defines the order in which the cells are iterated. If no walker is defined walkDefault is used.","name":"walk","type":{"link":null,"name":"GridWalker","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":null,"arrayDepth":0,"union":[{"name":"undefined","arrayDepth":0},{"name":"Position","arrayDepth":0}],"typeArguments":null}},"since":"0.11.1"}]},{"name":"includes","signatures":[{"description":"Returns true if the grid includes the given cell and false otherwise.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 1, 1, 4],\n    [5, 6, 2, 8],\n    [0, 2, 3, 4],\n]);\nincludes(grid, 2); // => true\nincludes(grid, 10); // => false\n","params":[{"description":"The grid in which to search.","name":"grid","type":{"link":null,"name":"Readonly","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"GridObject","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null}]}]}},{"description":"The value of the cell to search for.","name":"cell","type":{"link":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"This function calculates the grid position based on the iteration step and therefore defines the order in which the cells are iterated. If no walker is defined walkDefault is used.","name":"walk","type":{"link":null,"name":"GridWalker","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"boolean","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.5\n"}]},{"name":"includesWhere","signatures":[{"description":"Returns true if at least one cell in the grid satisfies the given callback function.","exampleCode":"const grid = createGridFromArray2D([\n    [{v: 1}, {v: 1}, {v: 1}, {v: 4}],\n    [{v: 5}, {v: 6}, {v: 2}, {v: 8}],\n    [{v: 0}, {v: 2}, {v: 3}, {v: 4}],\n]);\nincludesWhere(grid, (cell) => cell.v === 6); // => true\nincludesWhere(grid, (cell) => cell.v === 10); // => false\n","params":[{"description":"The grid in which to search.","name":"grid","type":{"link":null,"name":"Readonly","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"GridObject","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null}]}]}},{"description":"The callback function used to search for a cell. It is called on each cell and has to return true if the cell was found or false if not.","name":"callback","type":{"link":null,"name":"FindCallback","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"This function calculates the grid position based on the iteration step and therefore defines the order in which the cells are iterated. If no walker is defined walkDefault is used.","name":"walk","type":{"link":null,"name":"GridWalker","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"boolean","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.5\n"}]}],"path":"search"},{"name":"sideEffects","functions":[{"name":"forEachCell","signatures":[{"description":"Calls the given callback function on each cell in the grid.","exampleCode":"import {createGridFromArray2D} from \"gridl/core\";\nimport {forEachCell} from \"gridl/sideEffects\";\n\nconst grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\nlet str = \"\";\nforEachCell(grid, (cellValue) => {\n    str = `${str}${cellValue}`;\n});\n// => str === \"123456\"\n","params":[{"description":"The grid in which to search.","name":"grid","type":{"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"The callback function that is called on each cell.","name":"callback","type":{"link":null,"name":"ForEachCellCallback","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"This function calculates the grid position based on the iteration step and therefore defines the order in which the cells are iterated.","name":"walk","type":{"link":null,"name":"GridWalker","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"void","arrayDepth":0,"union":null,"typeArguments":[]}},"since":"0.11.1\n"}]}],"path":"sideEffects"},{"name":"transformers","functions":[{"name":"addColumn","signatures":[{"description":"Creates a transformer that adds the given column at the given x-position.","exampleCode":"const x = 1;\nconst y = 2;\nconst grid = createGridFromArray2D({\n    x,\n    y,\n    array2D: [\n        [1, 2, 3],\n        [4, 5, 6],\n    ],\n});\nconst newCol = [8, 9];\nconst newGrid = addColumn(1, newCol)(grid);\n// => {\n//    x: 1,\n//    y: 2,\n//    cellCount: 8,\n//    rowCount: 2,\n//    columnCount: 4,\n//    array2D: [\n//        [1, 8, 2, 3],\n//        [4, 9, 5, 6],\n//    ],\n// }\n","params":[{"description":"The x-position of where to add the column.","name":"x","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The column to add.","name":"column","type":{"link":null,"name":"T","arrayDepth":1,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"addColumnLeft","signatures":[{"description":"Creates a transformer that adds the given column at the left side of a grid.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\nconst newCol = [8, 9];\nconst newGrid = addColumnLeft(newCol)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 8,\n//     columnCount: 4,\n//     rowCount: 2,\n//     array2D: [\n//         [8, 1, 2, 3],\n//         [9, 4, 5, 6],\n//     ],\n// }\n","params":[{"description":"The column to add.","name":"column","type":{"link":null,"name":"T","arrayDepth":1,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"addColumnRight","signatures":[{"description":"Creates a transformer that adds the given column at the right side of a grid.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\nconst newColumn = [8, 9];\nconst newGrid = addColumnRight(newColumn)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 8,\n//     columnCount: 4,\n//     rowCount: 2,\n//     array2D: [\n//         [1, 2, 3, 8],\n//         [4, 5, 6, 9],\n//     ],\n// }\n","params":[{"description":"The column to add.","name":"column","type":{"link":null,"name":"T","arrayDepth":1,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"addColumns","signatures":[{"description":"Creates a transformer that adds the given columns at the given x-position.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n]);\nconst newColumns = [\n    [ 7,  8,  9],\n    [10, 11, 12],\n];\nconst newGrid = addColumns(1, newColumns)(grid);\n// => {\n//    x: 0,\n//    y: 0,\n//    cellCount: 15,\n//    columnCount: 5,\n//    rowCount: 3,\n//    array2D: [\n//        [0, 7, 10, 0, 0],\n//        [0, 8, 11, 0, 0],\n//        [0, 9, 12, 0, 0],\n//    ],\n// }\n","params":[{"description":"The x-position of where to add the columns.","name":"x","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The columns to add.","name":"columns","type":{"link":null,"name":"T","arrayDepth":2,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.9"}]},{"name":"addRow","signatures":[{"description":"Creates a transformer that adds the given row at the given y-position.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\nconst newRow = [7, 8, 9];\nconst newGrid = addRow(1, newRow)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [1, 2, 3],\n//         [7, 8, 9],\n//         [4, 5, 6],\n//     ],\n// }\n","params":[{"description":"The y-position of where to add the row.","name":"y","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The row to add.","name":"row","type":{"link":null,"name":"T","arrayDepth":1,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"addRowBottom","signatures":[{"description":"Creates a transformer that adds the given row to the bottom of the grid.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\nconst newRow = [7, 8, 9];\nconst newGrid = addRowBottom(newRow)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [1, 2, 3],\n//         [4, 5, 6],\n//         [7, 8, 9],\n//     ],\n// }\n","params":[{"description":"The row to add.","name":"row","type":{"link":null,"name":"T","arrayDepth":1,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"addRowTop","signatures":[{"description":"Creates a transformer that adds the given row to the top of the grid.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\nconst newRow = [7, 8, 9];\nconst newGrid = addRowTop(newRow)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [7, 8, 9],\n//         [1, 2, 3],\n//         [4, 5, 6],\n//     ],\n// }\n","params":[{"description":"The row to add.","name":"row","type":{"link":null,"name":"T","arrayDepth":1,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"addRows","signatures":[{"description":"Creates a transformer that adds the given rows at the given y-position.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n]);\nconst newRows = [\n    [ 7,  8,  9],\n    [10, 11, 12],\n];\nconst newGrid = addRows(1, newRows)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 3,\n//     rowCount: 4,\n//     array2D: [\n//         [ 1,  2,  3],\n//         [ 7,  8,  9],\n//         [10, 11, 12],\n//         [ 4,  5,  6],\n//     ],\n// }\n","params":[{"description":"The y-position of where to add the rows.","name":"y","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The rows to add.","name":"rows","type":{"link":null,"name":"T","arrayDepth":2,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.8"}]},{"name":"crop","signatures":[{"description":"Creates a transformer that crops a grid to the given area.\nPositions that are outside of the grid are ignored.","exampleCode":"const grid = createGridFromArray2D([\n    [ 0,  1,  2,  3],\n    [ 4,  5,  6,  7],\n    [ 8,  9, 10, 11],\n    [12, 13, 14, 15],\n    [16, 17, 18, 19],\n    [20, 21, 22, 23],\n    [24, 25, 26, 27],\n]);\nconst area = {x: 1, y: 2, columnCount: 2, rowCount: 3};\nconst croppedGrid = crop(area)(grid);\n// => {\n//     x: 1,\n//     y: 2,\n//     cellCount: 6,\n//     columnCount: 2,\n//     rowCount: 3,\n//     array2D: [\n//         [ 9, 10],\n//         [13, 14],\n//         [17, 18],\n//     ],\n// }\n","params":[{"description":"The area which defines the subgrid to be extracted.","name":"area","type":{"link":null,"name":"Area","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"},{"description":"Creates a transformer that crops a grid to the given coordinates.\nPositions that are outside of the grid are ignored.","exampleCode":"const grid = createGridFromArray2D([\n    [ 0,  1,  2,  3],\n    [ 4,  5,  6,  7],\n    [ 8,  9, 10, 11],\n    [12, 13, 14, 15],\n    [16, 17, 18, 19],\n    [20, 21, 22, 23],\n    [24, 25, 26, 27],\n]);\nconst croppedGrid = crop(1, 2, 2, 4)(grid);\n// => {\n//     x: 1,\n//     y: 2,\n//     cellCount: 6,\n//     columnCount: 2,\n//     rowCount: 3,\n//     array2D: [\n//         [ 9, 10],\n//         [13, 14],\n//         [17, 18],\n//     ],\n// }\n","params":[{"description":"The first x-coordinate of the area be extracted.","name":"x1","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The first y-coordinate of the area be extracted.","name":"y1","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The second x-coordinate of the area be extracted.","name":"x2","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The second y-coordinate of the area be extracted.","name":"y2","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.0"}]},{"name":"cropIntersection","signatures":[{"description":"Cuts out the intersecting grid of two grids.","exampleCode":"const grid = createGridFromArray2D([\n    [ 0,  1,  2,  3,  4],\n    [ 5,  6,  7,  8,  9],\n    [10, 11, 12, 13, 14],\n    [15, 16, 17, 18, 19],\n    [20, 21, 22, 23, 24],\n]);\nconst area = {columnCount: 3, rowCount: 3, x: 2, y: 1};\nconst newGrid = cropIntersection(area)(grid);\n// => {\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     x: 2,\n//     y: 1,\n//     array2D: [\n//         [ 7,  8,  9],\n//         [12, 13, 14],\n//         [17, 18, 19],\n//     ],\n// }\n","params":[{"description":"The other grid to intersect with.","name":"area","type":{"link":null,"name":"Area","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"fill","signatures":[{"description":"Creates a transformer that fills all cells of the grid with the given value.","exampleCode":"const grid = createGrid({columnCount: 4, rowCount: 5, createCell: () => 0});\nconst newGrid = fill(6)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 20,\n//     columnCount: 4,\n//     rowCount: 5,\n//     array2D: [\n//         [6, 6, 6, 6],\n//         [6, 6, 6, 6],\n//         [6, 6, 6, 6],\n//         [6, 6, 6, 6],\n//         [6, 6, 6, 6],\n//     ],\n// }\n","params":[{"description":"The value to fill the grid with.","name":"value","type":{"link":null,"name":"U","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The type of the original cell values.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null},{"description":"The type of the new cell values.","link":null,"name":"U","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"U","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"map","signatures":[{"description":"Creates a transformer that iterates over each cell of the grid and replaces the cell\nwith the value returned by the callback function.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 1,  2,  3],\n    [4, 5,  6,  7],\n    [8, 9, 10, 11],\n]);\nconst increaseByOne = (value) => value + 1;\nconst increaseAllByOne = map(increaseByOne);\nconst mappedGrid = increaseAllByOne(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 4,\n//     rowCount: 3,\n//     array2D: [\n//         [1,  2,  3,  4],\n//         [5,  6,  7,  8],\n//         [9, 10, 11, 12],\n//     ],\n// }\n","params":[{"description":"The callback function that is called for each cell.","name":"callback","type":{"link":null,"name":"MapCallback","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"U","arrayDepth":0,"union":null,"typeArguments":[]}]}},{"description":"This function calculates the grid position based on the iteration step and therefore defines the order in which the cells are iterated. If no walker is defined walkDefault is used.","name":"walk","type":{"link":null,"name":"GridWalker","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The type of the original cell values.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null},{"description":"The type of the new cell values.","link":null,"name":"U","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"U","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"mirrorHorizontally","signatures":[{"description":"Creates a transformer that mirrors the grid horizontally.","exampleCode":"const grid = createGridFromArray2D([\n    [0,  1,  2],\n    [3,  4,  5],\n    [6,  7,  8],\n    [9, 10, 11],\n]);\nconst mirroredGrid = mirrorHorizontally()(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 3,\n//     rowCount: 4,\n//     array2D: [\n//         [9, 10, 11],\n//         [6,  7,  8],\n//         [3,  4,  5],\n//         [0,  1,  2],\n//     ],\n// }\n","params":[],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"mirrorVertically","signatures":[{"description":"Creates a transformer that mirrors a grid vertically.","exampleCode":"const grid = createGridFromArray2D([\n    [0,  1,  2],\n    [3,  4,  5],\n    [6,  7,  8],\n    [9, 10, 11],\n]);\nconst mirroredGrid = mirrorVertically()(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 3,\n//     rowCount: 4,\n//     array2D: [\n//         [ 2,  1, 0],\n//         [ 5,  4, 3],\n//         [ 8,  7, 6],\n//         [11, 10, 9],\n//     ],\n// }\n","params":[],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"moveColumn","signatures":[{"description":"Creates a transformer that moves a column from one x-position to another.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 1,  2,  3],\n    [4, 5,  6,  7],\n    [8, 9, 10, 11],\n]);\nconst fromX = 2;\nconst toX = 1;\nconst newGrid = moveColumn(fromX, toX)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 4,\n//     rowCount: 3,\n//     array2D: [\n//         [0,  2, 1,  3],\n//         [4,  6, 5,  7],\n//         [8, 10, 9, 11],\n//     ],\n// }\n","params":[{"description":"Defines the x-position of the column that should be moved.","name":"fromX","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"Defines the x-position of where the column is to be moved.","name":"toX","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"moveGrid","signatures":[{"description":"Creates a transformer that moves the grid to the given position.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]);\nmoveGrid({x: -2, y: -4})(grid); // => {...grid, x: -2, y: -4});\n","params":[{"description":"The position of where to move the grid.","name":"position","type":{"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"moveRow","signatures":[{"description":"Creates a transformer that moves a row from one y-position to another.","exampleCode":"createGridFromArray2D([\n    [ 1,  2,  3],\n    [ 4,  5,  6],\n    [ 7,  8,  9],\n    [10, 11, 12],\n]);\nconst newGrid = moveRow(0, 3)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 3,\n//     rowCount: 4,\n//     array2D: [\n//         [ 4,  5,  6],\n//         [ 7,  8,  9],\n//         [10, 11, 12],\n//         [ 1,  2,  3],\n//     ],\n// }\n","params":[{"description":"Defines the y-position of the row that should be moved.","name":"fromY","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"Defines the y-position of where the row is to be moved.","name":"toY","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"removeColumn","signatures":[{"description":"Creates a transformer removes the column at the given x-position.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]);\nconst newGrid = removeColumn(1)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 6,\n//     columnCount: 2,\n//     rowCount: 3,\n//     array2D: [\n//         [1, 3],\n//         [4, 6],\n//         [7, 9],\n//     ],\n// }\n","params":[{"description":"The x-position of the column to be removed. Invalid positions are ignored.","name":"x","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"removeColumnLeft","signatures":[{"description":"Creates a transformer that removes the most left column.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]);\nconst newGrid = removeColumnLeft()(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 6,\n//     columnCount: 2,\n//     rowCount: 3,\n//     array2D: [\n//         [2, 3],\n//         [5, 6],\n//         [8, 9],\n//     ],\n// }\n","params":[],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"removeColumnRight","signatures":[{"description":"Creates a transformer that removes the most right column.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]);\nconst newGrid = removeColumnRight()(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 6,\n//     columnCount: 2,\n//     rowCount: 3,\n//     array2D: [\n//         [1, 2],\n//         [4, 5],\n//         [7, 8],\n//     ],\n// }\n","params":[],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"removeRow","signatures":[{"description":"Creates a transformer removes the row at the given y-position.","exampleCode":"const grid = createGrid({\n    createCell: (_pos, idx) => idx + 1\n    columnCount: 3,\n    rowCount: 3,\n    x; 1,\n    y: 2,\n});\nconst newGrid = removeRow(1)(grid);\n// => {\n//     x: 1,\n//     y: 2,\n//     cellCount: 6,\n//     columnCount: 3,\n//     rowCount: 2,\n//     array2D: [\n//         [1, 2, 3],\n//         [7, 8, 9],\n//     ],\n// });\n","params":[{"description":"The y-position of the column to be removed. Invalid positions are ignored.","name":"y","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell value.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"removeRowBottom","signatures":[{"description":"Creates a transformer that removes the bottom row.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]);\nconst newGrid = removeRowBottom()(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 6,\n//     columnCount: 3,\n//     rowCount: 2,\n//     array2D: [\n//         [1, 2, 3],\n//         [4, 5, 6],\n//     ],\n// }\n","params":[],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"removeRowTop","signatures":[{"description":"Creates a transformer that removes the top row.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]);\nconst newGrid = removeRowTop()(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 6,\n//     columnCount: 3,\n//     rowCount: 2,\n//     array2D: [\n//         [4, 5, 6],\n//         [7, 8, 9],\n//     ],\n// }\n","params":[],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"rotate90","signatures":[{"description":"Rotates a grid by 90 degrees `times` times.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 1,  2,  3],\n    [4, 5,  6,  7],\n    [8, 9, 10, 11],\n]);\n// 1 step can be thought of as 90 degrees, 2 steps 180 degrees and so on\nconst steps = 1;\nconst rotatedGrid = rotate90(steps)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 3,\n//     rowCount: 4,\n//     array2D: [\n//         [ 8, 4, 0],\n//         [ 9, 5, 1],\n//         [10, 6, 2],\n//         [11, 7, 3],\n//     ],\n// }\n","params":[{"description":"The number of times to rotate the array by 90 degrees. Positives integers rotate clockwise, whereas negative rotate counterclockwise.","name":"times","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"setCell","signatures":[{"description":"Creates a transformer that sets the cell value at the given x- and y-coordinates.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9, 10, 11],\n]);\nconst newGrid = setCell({x: 2, y: 1}, \"moin\")(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 4,\n//     rowCount: 3,\n//     array2D: [\n//         [0, 1, 2, 3],\n//         [4, 5, \"moin\", 7],\n//         [8, 9, 10, 11],\n//     ],\n// }\n","params":[{"description":"The position of the cell to update.","name":"position","type":{"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The value to set.","name":"value","type":{"link":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"setColumn","signatures":[{"description":"Creates a transformer that replaces the column at the given x-positon with the given column.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n]);\nconst newColumn = [6, 6, 6];\nconst newGrid = setColumn(0, newColumn)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [6, 0, 0],\n//         [6, 0, 0],\n//         [6, 0, 0],\n//     ],\n// }\n","params":[{"description":"The x-position of the column to be replaced.","name":"x","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The new column to replace the old one.","name":"column","type":{"link":null,"name":"T","arrayDepth":1,"union":null,"typeArguments":[]}},{"description":"An optional offset to shift the new column on the y-axis.","name":"yOffset","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"setRow","signatures":[{"description":"Replaces the row at the given y-positon with the provided row.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0],\n]);\nconst newRow = [6, 6, 6];\nconst newGrid = setRow(0, newRow)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [6, 6, 6],\n//         [0, 0, 0],\n//         [0, 0, 0],\n//     ],\n// }\n","params":[{"description":"The y-position of the row to be replaced.","name":"y","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The new row to replace to old one.","name":"newRow","type":{"link":null,"name":"T","arrayDepth":1,"union":null,"typeArguments":[]}},{"description":"An optional offset to shift the new row on the x-axis.","name":"xOffset","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"setSubGrid","signatures":[{"description":"Creates a transformer that applies the values of a subgrid on the main grid.","exampleCode":"// create base grid\nconst grid = createGridFromArray2D([\n    [ 0,  1,  2,  3,  4,  5],\n    [ 6,  7,  8,  9, 10, 11],\n    [12, 13, 14, 15, 16, 17],\n    [18, 19, 20, 21, 22, 23],\n    [24, 25, 26, 27, 28, 29],\n]);\n\n// create subgrid at position {x: 1, y: 2}\nconst subGrid = createGridFromArray2D({\n    x: 1,\n    y: 2,\n    array2D: [\n        [6, 6, 6],\n        [6, 6, 6],\n        [6, 6, 6],\n    ],\n});\n\n// apply subgrid\nconst newGrid = setSubGrid(subGrid)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 30,\n//     columnCount: 6,\n//     rowCount: 5,\n//     array2D: [\n//         [ 0,  1,  2,  3,  4,  5],\n//         [ 6,  7,  8,  9, 10, 11],\n//         [12,  6,  6,  6, 16, 17],\n//         [18,  6,  6,  6, 22, 23],\n//         [24,  6,  6,  6, 28, 29],\n//     ],\n// }\n","params":[{"description":"The subgrid that contains the values to be applied to the main grid.","name":"subGrid","type":{"link":null,"name":"Grid","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"shiftColumn","signatures":[{"description":"Shifts a column by the given amount of steps in a positive (downwards) or negative (upwards) direction.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]);\nconst newGrid = shiftColumn({x: 0, steps: 1})(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [7, 2, 3],\n//         [1, 5, 6],\n//         [4, 8, 9],\n//     ],\n// }\n","params":[{"description":"The x-value that indicates the column to shift and the steps which indicate the number of steps to shift.","name":"props","type":{"link":null,"name":"ShiftColumnProps","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.6"}]},{"name":"shiftRow","signatures":[{"description":"Shifts a row by the given amount of steps in a positive (right) or negative (left) direction.","exampleCode":"const grid = createGridFromArray2D([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n]);\nconst newGrid = shiftRow({y: 0, steps: 1})(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [3, 1, 2],\n//         [4, 5, 6],\n//         [7, 8, 9],\n//     ],\n// }\n","params":[{"description":"The y-value that indicates the row to shift and the steps which indicate the number of steps to shift.","name":"props","type":{"link":null,"name":"ShiftRowProps","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.6"}]},{"name":"swapCellGroups","signatures":[{"description":"Creates a transformer that swaps two cell groups.\nIf cells of a group are outside the grid, the swapped cell value will be undefined.\nWatch out when swapping overlapping cell groups: Overlapping cells are duplicated and replace other cells.","exampleCode":"const grid = createGridFromArray2D([\n    [ 0,  1,  2,  3],\n    [ 4,  5,  6,  7],\n    [ 8,  9, 10, 11],\n]);\nconst shape = {columnCount: 2, rowCount: 2};\nconst positionA = {x: 0, y: 0};\nconst positionB = {x: 2, y: 2};\nconst newGrid = swapCellGroups(shape, positionA, positionB)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [ 6,  7,  2,  3],\n//         [10, 11,  0,  1],\n//         [ 8,  9,  4,  5],\n//     ],\n// }\n","params":[{"description":"The shape of the groups to swap.","name":"shape","type":{"link":null,"name":"Shape","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The position of the top left corner of the first group to be swapped.","name":"positionA","type":{"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The position of the top left corner of the second group to be swapped.","name":"positionB","type":{"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":null,"arrayDepth":0,"union":[{"name":"T","arrayDepth":0},{"name":"undefined","arrayDepth":0}],"typeArguments":null}]}},"since":"0.11.7\n"}]},{"name":"swapCells","signatures":[{"description":"Creates a transformer that swaps the values of two cells.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n]);\nconst pos1 = {x: 1, y: 0};\nconst pos2 = {x: 2, y: 2};\nconst newGrid = swapCells(pos1, pos2)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [0, 8, 2],\n//         [3, 4, 5],\n//         [6, 7, 1],\n//     ],\n// }\n","params":[{"description":"Position of the first cell.","name":"position1","type":{"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"Position of the second cell.","name":"position2","type":{"link":null,"name":"Position","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1\n"}]},{"name":"swapColumns","signatures":[{"description":"Creates a transformer that swaps two columns at the given x-positions.\nIf one or both x-positions are outside of the grid, the original grid is returned without any transformations.","exampleCode":"const grid = createGridFromArray2D([\n    [0,  1,  2],\n    [3,  4,  5],\n    [6,  7,  8],\n    [9, 10, 11],\n]);\nconst newGrid = swapColumns(1, 2)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 12,\n//     columnCount: 3,\n//     rowCount: 4,\n//     array2D: [\n//         [0,  2,  1],\n//         [3,  5,  4],\n//         [6,  8,  7],\n//         [9, 11, 10],\n//     ],\n// }\n","params":[{"description":"The x-position of the first column.","name":"x1","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The x-position of the second column.","name":"x2","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"swapRows","signatures":[{"description":"Creates a transformer that swaps two rows at the given y-positions.\nIf one or both y-positions are outside of the grid, the original grid is returned without any transformations.","exampleCode":"const grid = createGridFromArray2D([\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n]);\nconst newGrid = swapRows(0, 1)(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [3, 4, 5],\n//         [0, 1, 2],\n//         [6, 7, 8],\n//     ],\n// }\n","params":[{"description":"The y-position of the first row.","name":"y1","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The y-position of the second row.","name":"y2","type":{"link":null,"name":"number","arrayDepth":0,"union":null,"typeArguments":[]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1\n"}]},{"name":"transform","signatures":[{"description":"Creates a transformer that combines a series of other transformers and applies them to the grid one by one.","exampleCode":"const oldGrid = createGridFromArray2D([\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n]);\nconst newGrid = transform(\n    map((_cell, pos) => pos.x < 2 ? 1 : 2),\n    setCell({x: 2, y: 1}, 666),\n    rotate90(1),\n    removeRow(1),\n)(oldGrid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 9,\n//     columnCount: 3,\n//     rowCount: 3,\n//     array2D: [\n//         [1, 1, 1],\n//         [2, 666, 2],\n//         [2, 2, 2],\n//     ],\n// }\n","params":[{"description":"The list of transformers to apply.","name":"transformers","type":{"link":null,"name":"GridTransformer","arrayDepth":1,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1"}]},{"name":"transformArea","signatures":[{"description":"Creates a transformer that combines a series of other transformers and applies them to an area within the grid one by one.","exampleCode":"const grid = createGridFromArray2D([\n    [ 0,  1,  2,  3,  4,  5],\n    [ 6,  7,  8,  9, 10, 11],\n    [12, 13, 14, 15, 16, 17],\n    [18, 19, 20, 21, 22, 23],\n    [24, 25, 26, 27, 28, 29],\n]);\nconst area = {x: 2, y: 1, columnCount: 2, rowCount: 3};\nconst newGrid = transformArea(area, [\n    map((_cell, pos) => pos.x < 1 ? 1 : 2),\n    setCell({x: 1, y: 1}, 666),\n    rotate90(1),\n    removeColumnRight(),\n])(grid);\n// => {\n//     x: 0,\n//     y: 0,\n//     cellCount: 30,\n//     columnCount: 6,\n//     rowCount: 5,\n//     array2D: [\n//         [ 0,  1,  2,   3,  4,  5],\n//         [ 6,  7,  1,   1, 10, 11],\n//         [12, 13,  2, 666, 16, 17],\n//         [18, 19, 20,  21, 22, 23],\n//         [24, 25, 26,  27, 28, 29],\n//     ],\n// }\n","params":[{"description":"The area to be transformed.","name":"area","type":{"link":null,"name":"Area","arrayDepth":0,"union":null,"typeArguments":[]}},{"description":"The list of transformer function to be applied.","name":"transformerList","type":{"link":null,"name":"GridTransformer","arrayDepth":1,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]},{"description":null,"name":"any","arrayDepth":0,"union":null,"typeArguments":[]}]}}],"typeParams":[{"description":"The cell type.","link":null,"name":"T","arrayDepth":null,"union":null,"typeArguments":null}],"returns":{"description":null,"type":{"description":null,"link":null,"name":"GridTransformer","arrayDepth":0,"union":null,"typeArguments":[{"description":null,"name":"T","arrayDepth":0,"union":null,"typeArguments":[]}]}},"since":"0.11.1\n"}]}],"path":"transformers"}]}},"pageContext":{}},
    "staticQueryHashes": ["2467390232","4144279431"]}